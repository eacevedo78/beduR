saludo <- "Hola, mundo!"
print(saludo)
saludo2 <- "hola emmanuel"
print(saludo)
print(saludo2)
"esto
es un comentario
multilinea"
saludo;despedida
saludo <- "Hola Mundo!"
saludo
despedida <- "Adiós Mundo"
despedida
saludo;despedida
saludo <- "Hola Mundo!"
saludo
despedida <- "Adiós Mundo"
despedida
saludo;despedida
saludo <- "Hola Mundo!"
saludo
despedida <- "Adiós Mundo"
despedida
saludo;despedida
############## SESIÓN 3: ANÁLISIS EXPLORATORIO DE DATOS  ###############
###############################################################################
setwd("/home/emmanuel/BeduFase2/beduR/sesion3")
############## SESIÓN 3: ANÁLISIS EXPLORATORIO DE DATOS  ###############
###############################################################################
install.packages("DescTools")
install.packages("moments")
var <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-03/Data/variables.csv")
str(var)
summary(var)
var$SEXO <- factor(var$SEXO)
summary(var)
var$ESTUDIOS <- factor(var$ESTUDIOS,levels=c("Primaria","Secundaria","Bachillerato", "Licenciatura", "Maestria"), ordered=TRUE)
var$NIVEL_SOCIOECO <- factor(var$NIVEL_SOCIOECO,levels=c("Bajo","Medio","Alto"),ordered=TRUE)
var$MEDIO_CONTACTO <- factor(var$MEDIO_CONTACTO)
var$ACTIVO <- factor(var$ACTIVO,labels= c("No","Si"))
summary(var)
str(var)
head(var)
freq <- table(var$ESTUDIOS)
freq
# Para mostrar (frecuencia relativa) proporcionalmente cuanto representa cada nivle de estudio se hace:
transform(freq,rel_freq=prop.table(freq))
# Para mostrar (frecuencia relativa) proporcionalmente cuanto representa cada nivle de estudio se hace:
transform(freq,rel_freq=prop.table(Freq))
freq
freq
freq <- table(var$ESTUDIOS)
freq
freq
str(freq)
# Para mostrar (frecuencia relativa) proporcionalmente cuanto representa cada nivle de estudio se hace:
transform(freq,rel_freq=prop.table(Freq))
#Ahorita usaremos la regla de la raiz
k = ceiling(sqrt(length(var$INGRESO)))
# Para el ancho de cada clase
ac = (max(var$INGRESO)-min(var$INGRESO))/k
# La funcion cut va a crear grupos, toma la variable a cortar y los puntos de corte
ingreso.clases <- cut(var$INGRESO,breaks = bins, include.lowest=TRUE, dig.lab=8)
bins <- seq(min(var$INGRESO),max(var$INGRESO), by = ac)
# La funcion cut va a crear grupos, toma la variable a cortar y los puntos de corte
ingreso.clases <- cut(var$INGRESO,breaks = bins, include.lowest=TRUE, dig.lab=8)
ingreso.clases
dist.freq <- table(ingreso.clases)
dist.freq
transform(dist.freq,
rel.freq=prop.table(Freq),
cum.freq=cumsum(prop.table(Freq)))
df <- df("diamonds")
library(ggplot2)
df <- df(diamonds)
df <- read(diamonds)
df <- read("diamonds")
diamonds
#  ¿Qué tipo de variable y escala de medición tiene la variable cut?
class(diamonds)
diamonds
#  ¿Qué tipo de variable y escala de medición tiene la variable cut?
class(diamonds$cut)
#  Reliza una tabla de frecuencias absolutas y relativas
transform(diamonds,freq_rel = prop.table(cut))
#  Reliza una tabla de frecuencias absolutas y relativas
freq <- table(diamonds$cut)
transform(freq,freq_rel = prop.table(Freq))
#  Reliza una tabla de frecuencias absolutas y relativas
freq <- table(diamonds$cut)
#  Reliza una tabla de frecuencias absolutas y relativas
freq <- table(diamonds$cut)
freq
transform(freq,freq_rel = prop.table(Freq))
#Para esta variable, ¿es posible calcular la frecuencia relativa acumulada? En caso afirmativo, agrégala a tu tabla anterior
transform(freq,freq_rel = prop.table(Freq),cum.freq=cumsum(prop.table(Freq)))
k= ceiling(1 + 3.3 *log(10)(length(diamonds$price)))
k= ceiling(1 + 3.3 *log(10)*(length(diamonds$price)))
length(diamonds$cut)
length(diamonds$price)
bins  <- seq(min(diamonds$price), max(diamonds$price), by = ac)
k= ceiling(1 + 3.3 *log(10)*(length(diamonds$price)))
ac = (max(diamonds$price)-min(diamonds$price)) / k
bins  <- seq(min(diamonds$price), max(diamonds$price), by = ac)
price.diamonds <- cut(diamonds$price, braks =bins, include.lowest=TRUE, dig.lab=10)
price.diamonds <- cut(diamonds$price, breaks =bins, include.lowest=TRUE, dig.lab=10)
price.diamonds <- cut(diamonds$price, breaks =bins, include.lowest=TRUE, dig.lab=10)
dist.freq <- table(price.diamonds)
transform(dist.freq, freq.rel = prop.table(Freq), cum.freq=cumsum(Freq))
## EJEMPLO 3: MEDIDAS DESCRIPTIVAS
df <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-03/Data/telecom_service.csv")
summary(df)
mean(df$total_day_calls)
# Medidas de tendencia central
#
mean(df$total_day_calls)
mean(df$total_day_calls, trim=0.25) #media truncada, quitara el 25% de los extremos
# Mediana, divide en partes iguales
median(df$total_day_calls)
# La moda no viene directamente en R pero viene en la libreria DescTools
Mode(df$total_day_calls)
library(DescTools)
install.packages("DescTools")
library(DescTools)
install.packages("DescTools")
install.packages("curl")
install.packages("DescTools")
install.packages("httr")
install.packages("DescTools")
install.packages("DescTools")
library(DescTools)
# La moda no viene directamente en R pero viene en la libreria DescTools
Mode(df$total_day_calls)
# La moda no viene directamente en R pero viene en la libreria DescTools
Mode(df$total_day_calls)[1]
# Medidas de dispersión
#varianza
var(df$total_day_calls)
#desviacion estandar
std(df$total_day_calls)
#desviacion estandar
sd(df$total_day_calls)
#Rango intercuartilico
IQR(df$total_day_calls) #q3 - q1
cuartiles <- quantile(df$total_day_calls, probs= c(0.25 ,0.5,0.75))
cuartiles
cuartiles <- quantile(df$total_day_calls, probs= c(0,0.25 ,0.5,0.75,1))
cuartiles
cuartiles <- quantile(df$total_day_calls, probs= c(0.25 ,0.5,0.75))
cuartiles
deciles <- quantile(df$total_day_calls, probs = seq(0.1,0.9, by=0.1))
deciles
percentiles <- quantile(df$total_day_calls,probs = seq(0,1,0.99,by=0.1)) #
percentiles <- quantile(df$total_day_calls,probs = seq(0.1,0.99,by=0.1)) #
percentiles
percentiles <- quantile(df$total_day_calls,probs = seq(0.1,0.99,by=0.01)) #
percentiles
my_hist <- hist(var$INGRESO,braks=bins, main="Histograma Ingreso")
#Ahorita usaremos la regla de la raiz
k = ceiling(sqrt(length(var$INGRESO))) #ceiling redondea hacia arriba aunque se pase por .1, ej, 1.1 sube a 2
# Para el ancho de cada clase
ac = (max(var$INGRESO)-min(var$INGRESO))/k
bins <- seq(min(var$INGRESO),max(var$INGRESO), by = ac)
my_hist <- hist(var$INGRESO,braks=bins, main="Histograma Ingreso")
my_hist
plot(my_hist, main = "Histograma acumulado", xlab = "Ingreso")
ggplot(var, aes(INGRESO)) +
geom_histogram(bins = 4) +
labs(title = "Histograma",
x = "Ingreso",
y = "Frequency") +
theme_classic()
ggplot(var, aes(INGRESO)) +
geom_histogram(aes(y = cumsum(..count..)), bins = 4) +
labs(title = "Histograma acumulado",
x = "Ingreso",
y = "Frequency") +
theme_classic()
my_hist$counts <- cumsum(my_hist$counts)
my_hist$counts  <- cumsum(my_hist$counts) #
plot(my_hist, main = "Histograma acumulado", xlab = "Ingreso")
ggplot(var, aes(INGRESO)) +
geom_histogram(bins = 4) +
labs(title = "Histograma",
x = "Ingreso",
y = "Frequency") +
theme_classic()
ggplot(var, aes(INGRESO)) +
geom_histogram(aes(y = cumsum(..count..)), bins = 4) +
labs(title = "Histograma acumulado",
x = "Ingreso",
y = "Frequency") +
theme_classic()
d <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-03/Data/distribuciones.csv")
hist(d$sim, main = "Distribución simétrica")
Mode(d$sim)[1]; median(d$sim); mean(d$sim)
hist(d$rs, main = "Distribución con sesgo a la derecha")
Mode(d$rs)[1]; median(d$rs); mean(d$rs)
hist(d$ls, main = "Distribución con sesgo a la izquierda")
Mode(d$ls)[1]; median(d$ls); mean(d$ls)
hist(d$sim, main = "Distribución simétrica")
Mode(d$sim)[1]; median(d$sim); mean(d$sim)
hist(d$rs, main = "Distribución con sesgo a la derecha")
Mode(d$rs)[1]; median(d$rs); mean(d$rs)
hist(d$ls, main = "Distribución con sesgo a la izquierda")
Mode(d$ls)[1]; median(d$ls); mean(d$ls)
